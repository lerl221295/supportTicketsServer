type Client {
    id: ID
    name: String
    lastname: String
    email: String
    phones: [ String ]
    address: String
    about: String
    twitter_id: ID
    facebook_id: ID
    organization: Organization
    interventions: [ Intervention ]
    devices: [ Device ]
    #Tickets soliticatos por el client
    tickets: [ Ticket ]
    face_base64: String
    #Cantidad de tickets del cliente
    count_tickets(state_key: String, priority: TicketPriority, type_key: String): Int
}

type ClientsResponse {
    nodes: [ Client ]
    count: Int
}

type Agent {
    id: ID
    role: AgentRole
    name: String
    lastname: String
    sex: Sex
    email: String
    phones: [ String ]
    about: String
    profession: String
    supplier: Supplier
    #Tickets asignados actualmente al agente
    tickets: [ Ticket ]
    groups: [ Group ]
    #Cantidad de tickets del agente
    count_tickets(state_key: String, priority: TicketPriority, type_key: String): Int
}

type Organization {
    id: ID
    name: String
    about: String
    domains: [ String ]
    clients: [ Client ]
    #Tickets creados por clientes de esta organizacion
    tickets: [ Ticket ]
}

type OrganizationsResponse {
    nodes: [ Organization ]
    count: Int
}

type Supplier {
    id: ID
    name: String
    about: String
    agents: [ Agent ]
    #Tickets asignados actualmente al proveedor
    tickets: [ Ticket ]
}

type Device {
    id: ID
    code: String
    name: String
    client: Client
    tickets: [ Ticket ]
}

type Task {
    text: String
    done: Boolean
}

type Group {
    id: ID
    name: String
    about: String
    group_scale: Group
    agents: [ Agent ]
    #Agentes que deben ser notificados
    notification_agents: [ Agent ]
    #Tiempo en que deben ser notificados los agentes cuando un ticket no ha sido asignado
    notification_hours: Int
    notification_text: String
    #Tickets asignados actualmente al grupo
    tickets: [ Ticket ]
}

type Message {
    text: String
    time: String
    agent: Agent
}

type Discussion {
    id: ID
    ticket: Ticket
    agents: [ Agent ]
    messages(last: Int): [ Message ]
}

union Autor = Client | Agent

type Intervention {
    id: ID
    text: String
    time: String
    type_autor: InterventionAutor
    autor: Autor
    ticket: Ticket
}

type TicketType {
    key: String
    text: String
}

#El number del ticket, sumado al dominio del tenant, es la clave univoca
type Ticket {
    time: String
    number: Int
    title: String
    description: String
    #Las prioridades como enum ya que no son modificables
    priority: TicketPriority
    type: TicketType
    state: Status
    #Estados a los que puede ir el ticket (calculado)
    next_states: [ Status ]
    source: Source
    agente: Agent
    client: Client
    activities: [ Activity ]
    intervention: [ Intervention ]
    discussion: Discussion
    device: Device
    group: Group
    supplier: Supplier
    tasks: [ Task ]
    custom_fields: [ TicketField ]
    #Cuando debe o debio realizarse la primera respuesta segun el SLA
    response_by: String
    #Cuando debe o debio solucionarse el ticket segun el SLA
    resolve_by: String
    #Sera null en los tickets que no esten solucionados (1-5, no satisfecho- satisfecho)
    satisfaction_level: Int
}

type TicketField {
    value: FieldValue
    metadata: Field
}

union FieldValue = TextValue | NumberValue | SelectValue | CheckValue

type TextValue {
    text: String
}

type NumberValue {
    number: Int
}

type SelectValue {
    key: String
}

type CheckValue {
    check: Boolean
}


union Field = FreeField | SelectField

type FreeField {
    position: Int
    key: String
    label: String
    type: FieldType
}

type SelectOption {
    text: String
    key: String
    position: Int
}

type SelectField {
    position: Int
    key: String
    label: String
    type: FieldType
    options: [ SelectOption ]
}

type Activity {
    id: ID
    time: String
    ticket: Ticket
    type_autor: ActivityAutor
    autor: Autor
    changes: [ Change ]
}

type Change {
    prop_name: String
    old_value: String
    new_value: String
}

type Stage {
    id: ID
    key: String
    name: String
    statuses: [ Status ]
}

type Status {
    id: ID
    key: String
    label: String
    stage: Stage
    # Estados a los que se puede ir hacia ese estado
    came_from: [ Status ]
}

type Category {
    id: ID
    name: String
    articles: [ Article ]
}

type Article {
    id: ID
    name: String
    description: String
    time: String
    publisher_user: Agent
}

union Entity = Agent | Client | Supplier

type User {
    entity: Entity
    rol: UserRole
    notifications: [ Notification ]
}

type Notification {
    text: String
    time: String
    readed: Boolean
    ticket: Ticket

}

type PolicyTime {
    value: Int
    unity: UnityTime
}

type Policy {
    priority: TicketPriority
    first_response: PolicyTime
    solved: PolicyTime
    #Si el tiempo correra en horas habiles o 24x7
    operational_hours: OperationalHours
}

type SLAPolicy {
    id: ID
    default: Boolean
    name: String
    description: String
    active: Boolean
    position: Int
    #Una politica para cada prioridad
    policies: [ Policy ]
    clients: [ Client ]
    organizations: [ Organization ]
    alerts: [ Alert ]
}

type Alert {
    # Puede ser recordatorio o violación del SLA
    type: AlertType
    # Puede ser respuesta o resolución
    motive: AlertMotive
    hours: Float
    to: [ Agent ]
    message: String
}

type Horary {
    #Hora del dia en que se comienza a trabajar
    start: Int
    #Hora del dia en que se termina de trabajar
    end: Int
}

type Holiday {
    name: String
    day: Int
    month: Int
}

type WorkingDay {
    day: WeekDay
    horary: Horary
}

type BusinessHours {
    working_days: [ WorkingDay ]
    holidays: [ Holiday ]
}

union Automation = Dispatcher | Observer | Supervisor | Scenario

type Condition {
    #Campo que está siendo condicionado
    conditioned_field: Field
    # Operador de la condición
    condition_operator: ConditionOperator
    # Valor con el que va a ser comparado
    value: FieldValue
}

type SupervisorCondition {
    #Campo que está siendo condicionado
    conditioned_param: TimeConditions
    # Operador de la condición
    condition_operator: ConditionOperator
    # Valor con el que va a ser comparado
    hours: Int
}



type Dispatcher {
    id: ID
    name: String
    description: String
    comparator: LogicalComparator
    conditions: [ Condition ]
    actions: [ Action ]
}

type Supervisor {
    id: ID
    name: String
    description: String
    comparator: LogicalComparator
    conditions: [ Condition ]
    time_conditions: [ SupervisorCondition ]
    actions: [ Action ]
}

type Observer {
    id: ID
    name: String
    description: String
    autors: [ Agent ]
    # En caso de que sea cualquiera, no habrá array de agentes
    anyone: Boolean
    events: [ Event ]
    comparator: LogicalComparator
    conditions: [ Condition ]
    actions: [ Action ]
}

type Scenario {
    id: ID
    name: String
    description: String
    comparator: LogicalComparator
    conditions: [ Condition ]
    actions: [ Action ]
}

# Los eventos se podrán configurar para cuando cambie cualquier campo del ticket
type Event {
    id: ID
    observer: Observer
    field: Field
    # Teniendo el campo podré saber si los valores que tengo son id, keys o texto, fecha, lo que sea,
    # y podré acceder a ellos fácilmente, aunque quizá no sea necesario
    old_value: FieldValue
    new_value: FieldValue
}

union Action = ActionField | ActionEmail

type ActionField {
    field: Field
    # El valor puede tener múltiples tipos de dato, pero con string se puede parsear fácilmente
    new_value: FieldValue
}

union EmailReceiver = Agent | Client | Group

type ActionEmail {
    subject: String
    body: String
    to: EmailReceiver
    receiver_type: ReceiverType
}

type Tenant {
    id: ID
    name: String
    subdomain: String
    phones: [ String ]
    active: Boolean
    subscription_time: String
    # Imagen en base64
    icon: String
    colors: TenantColors
    plans: [ TenantPlan ]
}

type TenantColors {
    primary: String
    secundary: String
    tertiary: String
    quaternary: String
}

type TenantPlan {
    subscription_plan: SubscriptionPlan
    # plan_key: String
    start_date: String
    end_date: String
    annual_payment: Boolean
    # Calculado con dia actual y fecha_fin
    active: Boolean
}

type SubscriptionPlan {
    id: ID
    name: String
    slogan: String
    # Precio en dólares del mes, pagando de contado el año
    monthly_cash_price: Int
    # Precios del mes, pagando mensual
    monthly_credit_price: Int
    multiple_SLA: Boolean
    satisfaction_survey: Boolean
    ticket_custom_fields: Boolean
    dispatcher: Boolean
    observer: Boolean
    supervisor: Boolean
    scenario: Boolean
    knowledge_base: Boolean
    multichannel_support: Boolean
}

type Indicators {
    unresolved: Int
    overdue: Int
    due_today: Int
    open: Int
    on_hold: Int
    unassigned: Int
}
