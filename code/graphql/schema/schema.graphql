type Client {
	id: String
	name: String
	lastname: String
	email: String
	phones: [String]
	address: String
	about: String
    twitter_id: String
    facebook_id: String
    organization: Organization
    interventions: [Intervention]
}

type Agent {
	id: String
    name: String
    lastname: String
    email: String
    phones: [String]
    about: String
    profession: String
    supplier: Supplier
}

type Organization {
    id: String
    name: String
    about: String
    domains: [String]
    clients: [Client]
}

type Supplier {
    id: String
    name: String
    about: String
    agents: [Agent]
}

type Device {
    id: String
    code: String
    name: String
    client: Client
    tickets: [Ticket]
}

type Task {
    text: String
    done: Boolean
}

type Group {
    id: String
    name: String
    about: String
    group_scale: Group
    agents: [Agent]
    # Agentes que deben ser notificados
    notification_agents: [Agent]
    # Tiempo en que deben ser notificados los agentes cuando un ticket no ha sido asignado
    notification_hours: Int
    notification_text: String
}

type Message {
    text: String
    time: String
    agent: Agent
}

type Discussion {
    id: String
    agents: [Agent]
    messages: [Message]
}

union Autor = Client | Agent

enum InterventionAutor {
    AGENT
    CLIENT
}

type Intervention {
    id: String
    text: String
    time: String
    type_autor: InterventionAutor
    autor: Autor
}

enum Source {
    PORTAL
    EMAIL
    FACEBOOK
    TWITTER
}

type Ticket {
    id: String
    number: Int
    title: String
    description: String
    ###################
    priority: String
    type: String
    state: String
    next_states: [String]
    source: Source
    agente: Agent
    client: Client
    activities: Activity
    intervention: Intervention
    discussion: Discussion
    device: Device
    group: Group
    supplier: Supplier
    tasks: [Task]
    custom_fields_values: [CustomFieldValues]
    response_by: String
    resolve_by: String
    #sera null en los tickets que no esten solucionados (1-5, no satisfecho- satisfecho)
    satisfaction_level: Int
}

union CustomFieldValues = TextValue | NumberValue | SelectValue | CheckValue

type TextValue {
    value: String
    metadata: CustomField
}

type NumberValue {
    value: Int
    metadata: CustomField
}

type SelectValue {
    key: String
    metadata: CustomField
}

type CheckValue {
    value: Boolean
    metadata: CustomField
}


enum FieldType {
    TEXT
    TEXTAREA
    NUMBER
    DATE
    SELECT
    CHECKBOX
}

union CustomField = FreeField | SelectField

type FreeField {
    position: Int
    key: String
    label: String
    type: FieldType
}

type SelectOption {
    text: String
    key: String
    position: Int
}

type SelectField {
    position: Int
    key: String
    label: String
    type: FieldType
    options: [SelectOption]
}

enum ActivityAutor {
    AGENT
    CLIENT
    SYSTEM
}

type Activity {
    id: String
    time: String
    type_autor: ActivityAutor
    autor: Autor
    changes: [Change]
}

type Change {
    prop_name: String
    old_value: String
    new_value: String
}

type Stage {
    id: String
    key: String
    name: String
    statuses: [Status]
}

enum UserRoles {
    AGENT
    SUPERVISOR
    SUPPLIER
}

type Status {
    id: String
    key: String
    label: String
    stage: Stage
    # Estados a los que se puede ir hacia ese estado
    statuses: [Status]
    roles_permissions: [UserRoles]
}

type Category {
    id: String
    name: String
    articles: [Article]
}

type Article {
    name: String
    description: String
    time: String
    publisher_user: Agent
}

union Entity = Agent | Client | Supplier

type User {
    entity: Entity
    notifications: [Notification]

}

type Notification {
    text: String
    time: String
    readed: Boolean
    ticket: Ticket

}

enum UnityTime {
    MINUTES
    HOURS
    DAYS
    MONTHS
}

enum OperationalHours {
    CALENDAR
    BUSINESS
}

type PolicyTime {
    value: Int
    unity: UnityTime
}

type Policy {
    #low, medium, high, urgent (considerar enum)
    priority_key: String
    first_response: PolicyTime
    solved: PolicyTime
    #si el tiempo correra en horas habiles o 24x7
    operational_hours: OperationalHours
}

type SLAPolicy {
    id: String
    default: Boolean
    name: String
    description: String
    active: Boolean
    position: Int
    #una politica para cada prioridad
    policies: [Policy]
    clients: [Client]
    organizations: [Organization]
}

type Horary {
    # hora del dia en que se comienza a trabajar
    start: Int
    # hora del dia en que se termina de trabajar
    end: Int
}

enum WeekDay {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

type Holiday {
    name: String
    day: Int
    month: Int
}

type WorkingDay {
    day: WeekDay
    horary: Horary
}

type BusinessHours {
    working_days: [WorkingDay]
    holidays: [Holiday]
}

type Query {
	customFields: [ CustomField ]
}

schema {
	query: Query
}