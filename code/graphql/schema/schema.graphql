type Query {
	ticket(number: Int!): Ticket
	tickets(filter: FilterTicketInput, limit: Int, offset: Int): TicketsResponse
	ticketMetadata: TicketMetadata
	#EL ticket_number es opcional. Si no se provee, se obtiene para todos los tickets
    activities(ticket_number: Int, limit: Int, offset: Int): ActivitiesResponse
	#EL ticket_number es opcional. Si no se provee, se obtiene para todos los tickets
	interventions(ticket_number: Int, last: Int): [ Intervention ]

	clients(search_text: String, limit: Int, offset: Int): ClientsResponse
	client(id: ID!): Client
	#EL cliente_id es opcional. Si no se provee, se obtiene para todos los clientes
	devices(cliente_id: ID): [ Device ]
	organizations(search_text: String, limit: Int, offset: Int): OrganizationsResponse
	organization(id: ID!): Organization

	agents(search_text: String, limit: Int, offset: Int, groups: [ID], organizations: [ID]): AgentsResponse
	agent(id: ID!): Agent
	groups(search_text: String, limit: Int, offset: Int): GroupsResponse
	group(id: ID): Group
	suppliers(search_text: String, limit: Int, offset: Int): SuppliersResponse
	supplier(id: ID!): Supplier

	solutions: [ Category ]
	solution(id: ID!): Category
	article(id: ID!): Article

	notifications(limit: Int, offset: Int): NotificationsResponse

	discussion(ticket_number: Int!): Discussion

	# Pasando el atributo days, solo obtienes el horario de esos dias indicados
	businessHours(days: [WeekDay!]): BusinessHours
	SLAPolicies: [ SLAPolicy ]
	SLAPolicy(id: ID!): SLAPolicy

	# DASHBOARD INDICATORS
	indicators: Indicators

	# DISPATCHER AUTOMATION
    dispatchers: [ Dispatcher ]
    dispatcher(id: ID!): Dispatcher

	# REPORTES
	ticketsCountByDay(last: Int): [ TicketByDay ]

}

type Mutation {
	createTicket(ticket: TicketInput): Ticket
	updateTicket(ticket: TicketUpdateInput!): Ticket
	addIntervention(intervention: InterventionInput!): Intervention
	#No pueden haber dos tareas con el mismo text
	addTask(ticket_number: Int!, text: String!): Task
	# -> !done del task con el text indicado
	checkTask(ticket_number: Int!, text: String!): Task

	createClient(client: ClientInput!): Client
	updateClient(client: ClientInput!): Client
	createDevice(client_id: ID!): Device
	createOrganization(organization: OrganizationInput!): Organization
	updateOrganization(organization: OrganizationInput!): Organization

	createAgent(agent: AgentInput!): Agent
	updateAgent(agent: AgentInput!): Agent
	createGroup(group: GroupInput!): Group
	updateGroup(group: GroupInput!): Group
	disolveGroup(group_id: ID!): String
	createSupplier(supplier: SupplierInput!): Supplier
	updateSupplier(supplier: SupplierInput!): Supplier

	createCategory(category: CategoryInput!): Category
	updateCategory(category: CategoryInput!): Category
	addArticle(article: ArticleInput!): Article
	updateArticle(article: ArticleInput!): Article

	addAgentsToDiscussion(agents_id: [ ID ], ticket_number: Int!): [ Agent ]

	updateBusinessHours(business_hours: BusinessHoursInput!): BusinessHours

	createSLAPolicy(slapolicy: SlapolicyInput!): SLAPolicy
	updateSLAPolicy(slapolicy: SlapolicyInput!): SLAPolicy
	deleteSLAPolicy(id: ID!): SLAPolicy
	updateSLAPoliciesOrder(slapolicies: [SlapoliciesOrderInput]!): [ SLAPolicy ]

	updateTicketTypes(types: [TicketTypeInput!]): [ TicketType ]
	updateCustomFields(custom_fields: [CustomFieldInput!]): [ Field ]
	updateTicketStates(states: [TicketStateInput!]): [State!]

    notificationReaded(id: ID!): Notification

	prueba: String
    pruebaNotif: String
	addActivity: String
}

type Subscription {
	newTicket(filter: FilterTicketInput): Ticket
	newNotification: Notification
	newDiscussion: Discussion
	discussionMessage(ticket_number: Int!): Message
	newActivity(ticket_number: Int): Activity
	interventions(ticket_number: Int): Intervention
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}