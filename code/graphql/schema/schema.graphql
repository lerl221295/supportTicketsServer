type Client {
	id: String
	name: String
	lastname: String
	email: String
	phones: [String]
	address: String
	about: String
    twitter_id: String
    facebook_id: String
    organization: Organization
    interventions: [Intervention]
    #Tickets soliticatos por el client
    tickets: [Ticket]
}

type Agent {
	id: String
    name: String
    lastname: String
    email: String
    phones: [String]
    about: String
    profession: String
    supplier: Supplier
    #Tickets asignados actualmente al agente
    tickets: [Ticket]
}

type Organization {
    id: String
    name: String
    about: String
    domains: [String]
    clients: [Client]
    #Tickets creados por clientes de esta organizacion
    tickets: [Ticket]
}

type Supplier {
    id: String
    name: String
    about: String
    agents: [Agent]
    #Tickets asignados actualmente al proveedor
    tickets: [Ticket]
}

type Device {
	id: String
	code: String
	name: String
	client: Client
	tickets: [Ticket]
}

type Task {
	text: String
	done: Boolean
}

type Group {
    id: String
    name: String
    about: String
    group_scale: Group
    agents: [Agent]
    #Agentes que deben ser notificados
    notification_agents: [Agent]
    #Tiempo en que deben ser notificados los agentes cuando un ticket no ha sido asignado
    notification_hours: Int
    notification_text: String
    #Tickets asignados actualmente al grupo
    tickets: [Ticket]
}

type Message {
	text: String
	time: String
	agent: Agent
}

type Discussion {
	id: String
	agents: [Agent]
	messages: [Message]
}

union Autor = Client | Agent

enum InterventionAutor {
	AGENT
	CLIENT
}

type Intervention {
	id: String
	text: String
	time: String
	type_autor: InterventionAutor
	autor: Autor
	ticket: Ticket
}

enum Source {
	PORTAL
	EMAIL
	FACEBOOK
	TWITTER
}

type TicketType {
    key: String
    text: String
}

enum TicketPriority {
    low
    medium
    high
    urgent
}

type Ticket {
    id: String
    number: Int
    title: String
    description: String
    #Las prioridades como enum ya que no son modificables
    priority: TicketPriority
    type: TicketType
    state: Status
    #Estados a los que puede ir el ticket (calculado)
    next_states: [Status]
    source: Source
    agente: Agent
    client: Client
    activities: [Activity]
    intervention: [Intervention]
    discussion: Discussion
    device: Device
    group: Group
    supplier: Supplier
    tasks: [Task]
    custom_fields: [TicketField]
    #Cuando debe o debio realizarse la primera respuesta segun el SLA
    response_by: String
    #Cuando debe o debio solucionarse el ticket segun el SLA
    resolve_by: String
    #Sera null en los tickets que no esten solucionados (1-5, no satisfecho- satisfecho)
    satisfaction_level: Int
}

type TicketField {
	value: FieldValue
	metadata: Field
}

union FieldValue = TextValue | NumberValue | SelectValue | CheckValue

type TextValue {
	text: String
}

type NumberValue {
	number: Int
}

type SelectValue {
	key: String
}

type CheckValue {
	check: Boolean
}


enum FieldType {
	TEXT
	TEXTAREA
	NUMBER
	DATE
	SELECT
	CHECKBOX
}

union Field = FreeField | SelectField

type FreeField {
	position: Int
	key: String
	label: String
	type: FieldType
}

type SelectOption {
	text: String
	key: String
	position: Int
}

type SelectField {
	position: Int
	key: String
	label: String
	type: FieldType
	options: [SelectOption]
}

enum ActivityAutor {
	AGENT
	CLIENT
	SYSTEM
}

type Activity {
	id: String
	time: String
	type_autor: ActivityAutor
	autor: Autor
	changes: [Change]
}

type Change {
	prop_name: String
	old_value: String
	new_value: String
}

type Stage {
	id: String
	key: String
	name: String
	statuses: [Status]
}

enum UserRoles {
	AGENT
	SUPERVISOR
	SUPPLIER
}

type Status {
	id: String
	key: String
	label: String
	stage: Stage
	# Estados a los que se puede ir hacia ese estado
    came_from: [Status]
}

type Category {
	id: String
	name: String
	articles: [Article]
}

type Article {
	name: String
	description: String
	time: String
	publisher_user: Agent
}

union Entity = Agent | Client | Supplier

type User {
	entity: Entity
	notifications: [Notification]

}

type Notification {
	text: String
	time: String
	readed: Boolean
	ticket: Ticket

}

enum UnityTime {
	MINUTES
	HOURS
	DAYS
	MONTHS
}

enum OperationalHours {
	CALENDAR
	BUSINESS
}

type PolicyTime {
	value: Int
	unity: UnityTime
}

type Policy {
    priority: TicketPriority
    first_response: PolicyTime
    solved: PolicyTime
    #Si el tiempo correra en horas habiles o 24x7
    operational_hours: OperationalHours
}

type SLAPolicy {
    id: String
    default: Boolean
    name: String
    description: String
    active: Boolean
    position: Int
    #Una politica para cada prioridad
    policies: [Policy]
    clients: [Client]
    organizations: [Organization]
}

type Horary {
    #Hora del dia en que se comienza a trabajar
    start: Int
    #Hora del dia en que se termina de trabajar
    end: Int
}

enum WeekDay {
	MONDAY
	TUESDAY
	WEDNESDAY
	THURSDAY
	FRIDAY
	SATURDAY
	SUNDAY
}

type Holiday {
	name: String
	day: Int
	month: Int
}

type WorkingDay {
	day: WeekDay
	horary: Horary
}

type BusinessHours {
	working_days: [WorkingDay]
	holidays: [Holiday]
}

enum AutomationsType {
	DISPATCHER
	OBSERVER
	SUPERVISOR
	SCENARIO
}

union Automation = Dispatcher | Observer | Supervisor | Scenario

type Condition {
	#Campo que está siendo condicionado
	conditioned_field: Field
	# Operador de la condición
	condition_operator: ConditionOperator
	# Valor con el que va a ser comparado
	value: FieldValue
}

type SupervisorCondition {
	#Campo que está siendo condicionado
	conditioned_param: TimeConditions
	# Operador de la condición
	condition_operator: ConditionOperator
	# Valor con el que va a ser comparado
	hours: Int
}

enum ConditionOperator {
	IS
	NOT
	CONTAINS
	NOT_CONTAINS
	STARTS
	ENDS
	TRUE
	FALSE
	HIGHER
	HIGHER_OR_EQUAL
	LESS
	LESS_OR_EQUAL
}

enum TimeConditions {
	HOURS_SINCE_CREATED
	HOURS_SINCE_PENDING
	HOURS_SINCE_RESOLVED
	HOURS_SINCE_ASSIGNED
	HOURS_SINCE_REQUESTER_RESPONDED
	HOURS_SINCE_AGENT_RESPONDED
	HOURS_SINCE_TICKET_OVERDUE
}

enum LogicalComparator {
	AND
	OR
}

type Dispatcher {
	id: String
	name: String
	description: String
	comparator: LogicalComparator
	conditions: [ Condition ]
	actions: [ Action ]
}

type Supervisor {
	id: String
	name: String
	description: String
	comparator: LogicalComparator
	conditions: [ Condition ]
	actions: [ Action ]
}

type Observer {
	id: String
	name: String
	description: String
	autors: [ Agent ]
	# En caso de que sea cualquiera, no habrá array de agentes
	anyone: Boolean
	events: [ Event ]
	comparator: LogicalComparator
	conditions: [ Condition ]
	actions: [ Action ]
}

type Scenario {
	id: String
	name: String
	description: String
	comparator: LogicalComparator
	conditions: [ Condition ]
	actions: [ Action ]
}

# Los eventos se podrán configurar para cuando cambie cualquier campo del ticket
type Events {
	id: String
	observer: Observer
	field: Field
	# Teniendo el campo podré saber si los valores que tengo son id, keys o texto, fecha, lo que sea,
	# y podré acceder a ellos fácilmente, aunque quizá no sea necesario
	old_value: FieldValue
	new_value: FieldValue
}

union Action = ActionField | ActionEmail

type ActionField {
	field: Field
	# El valor puede tener múltiples tipos de dato, pero con string se puede parsear fácilmente
	new_value: FieldValue
}

type ActionEmail {
	subject: String
	body: String
	to: String
	receiver_type: ReceiverType
}

enum ReceiverType {
	AGENT
	CLIENT
	GROUP
}

type Query {
	customFields: [ Field ]
}

schema {
	query: Query
}